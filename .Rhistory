library(Biostrings)
library(msa)
library(dplyr)
library(tidyverse)
library(genepop)
library(tidyr)
library(seqinr)
library(ape)
# 1. Import and align your DNA sequences
combinedseq <- readDNAStringSet("Data/sequences.fasta")
# CLEAN UP #####
# Clear environment
rm(list = ls())
# Clear console
cat("\014")  # ctrl+L
# 1. Import and align your DNA sequences
combinedseq <- readDNAStringSet("Data/sequences.fasta")
combinedseq
#### Creating a consensus ####
alignment_set <- DNAStringSet(combinedseq)
consensus <- consensusString(alignment_set)
print(consensus)
#### Creating an msa alignment ####
myFirstAlignment <- msa(combinedseq)
myFirstAlignment
print(myFirstAlignment, show="complete")
count_gaps <- function(sequence) {
#Search for the presence of "-" in the sequence
gap_positions <- grepl("-", sequence)
num_gaps <- sum(gap_positions)
return(num_gaps)
num_gaps_in_sequences <- sapply(consensus, count_gaps)
total_gaps <- sum(num_gaps_in_sequences)
print(total_gaps)
x
# Clear console
cat("\014")  # ctrl+L
print(total_gaps)
# CLEAN UP #####
# Clear environment
rm(list = ls())
# Clear packages
# requires the package pacman to work# CLEAN UP #####
# Clear environment
p_unload(all)  # Remove all add-ons
# Clear console
cat("\014")  # ctrl+L
# CLEAN UP #####
# Clear environment
rm(list = ls())
# Clear console
cat("\014")  # ctrl+L
# 1. Import and align your DNA sequences
combinedseq <- readDNAStringSet("Data/sequences.fasta")
combinedseq
#### Creating a consensus ####
alignment_set <- DNAStringSet(combinedseq)
consensus <- consensusString(alignment_set)
print(consensus)
#### Creating a consensus ####
alignment_set <- DNAStringSet(combinedseq)
consensus <- consensusString(alignment_set)
print(consensus)
#### Creating an msa alignment ####
myFirstAlignment <- msa(combinedseq)
library(Biostrings)
library(msa)
library(dplyr)
library(tidyverse)
library(genepop)
library(tidyr)
library(seqinr)
library(ape)
library(phangorn)
# 1. Import and align your DNA sequences
combinedseq <- readDNAStringSet("Data/sequences.fasta")
combinedseq
#### Creating a consensus ####
alignment_set <- DNAStringSet(combinedseq)
consensus <- consensusString(alignment_set)
print(consensus)
#### Creating an msa alignment ####
myFirstAlignment <- msa(combinedseq)
myFirstAlignment
print(alignment_set)
#### Creating an msa alignment ####
msaalignment <- msa(combinedseq)
msaalignment
print(msaalignment, show="complete")
#Create a distance matrix
dist_matrix <- dist.alignment(msaalignment)
#Create a distance matrix
dist_matrix <- dist.alignment(msaalignment)
?dist.alignment
#Create a distance matrix
dist_matrix <- dist.alignment(msaalignment, matrix="similarity")
class_of_alignment <- class(msaalignment)
print(class_of_alignment)
#### Creating an msa alignment ####
msaalignment <- msa(alignment_set)
msaalignment
print(msaalignment, show="complete")
#Create a distance matrix
dist_matrix <- dist.alignment(msaalignment, matrix="similarity")
class_of_alignment <- class(msaalignment)
print(class_of_alignment)
alignment_object <- msaConvert(msaalignment, "alignment")
alignment_object <- seqinr::alignment msaConvert(msaalignment, "alignment")
alignment_object <-  msaConvert(msaalignment, "alignment", type="seqinr::alignment")
alignment_object <-  msaConvert(msaalignment, type="seqinr::alignment")
#Create a distance matrix
dist_matrix <- dist.alignment(msaalignment, matrix="similarity")
class_of_alignment <- class(msaalignment)
print(class_of_alignment)
#### Creating an msa alignment ####
msaalignment <- msa(combinedseq)
msaalignment
print(msaalignment, show="complete")
#### Creating a consensus ####
consensus <- consensusString(msaalignment)
print(consensus)
# Identify variations or mutations
mutations <- consensus != sequences
# Identify variations or mutations
mutations <- "consensus" != sequences
# Identify variations or mutations
mutations <- consensus_sequence != combinedseq
# Identify variations or mutations
mutations <- consensus != combinedseq
print("Mutations:")
print(mutations)
msaPrettyPrint(msaalignment, showNames = TRUE)
msaPrettyPrint(msaalignment)
#If so, what kinds of mutations do you observe in this individual (or individuals)?
# Get the positions where mutations occur
mutation_positions <- which(mutations)
# Extract sequences at mutation positions
mutated_sequences <- sapply(sequences, function(seq) {
paste0(substr(seq, mutation_positions, mutation_positions), collapse = "")
})
# Extract sequences at mutation positions
mutated_sequences <- sapply(combinedseq, function(seq) {
paste0(substr(seq, mutation_positions, mutation_positions), collapse = "")
})
mutation_positions
mutation_positions <- list(c(4, 6, 10))
# Extract sequences at mutation positions
mutated_sequences <- lapply(seq_along(combinedseq), function(seq) {
paste0(substr(seq, mutation_positions, mutation_positions), collapse = "")
})
# Extract sequences at mutation positions
mutated_sequences <- lapply(seq_along(combinedseq), function(i) {
positions <- unlist(mutation_positions[[i]])
substr(sequences[i], positions, positions)
})
substr(combinedseq[i], positions, positions)
#If so, what kinds of mutations do you observe in this individual (or individuals)?
# Get the positions where mutations occur
mutation_positions <- which(mutations)
mutation_positions
# Function to find point mutations
find_point_mutations <- function(reference, sequence)
{ mutations <- which(reference != sequence) if (length(mutations) == 0)
# Function to find point mutations
find_point_mutations <- function(reference, sequence)
{ mutations <- which(reference != sequence)
if (length(mutations) == 0)
{ return("No mutations found") }
mutation_info <- sapply(mutations, function(pos)
{ paste0(substring(reference, pos, pos), "->", substring(sequence, pos, pos)) })
return(mutation_info) }
# Determine the type of mutations for each sequence
mutations_list <- mapply(find_point_mutations, MoreArgs = list(reference = reference_seq),
dna_sequences)
# Determine the type of mutations for each sequence
mutations_list <- mapply(find_point_mutations, MoreArgs = list(reference = reference_seq),
combinedseq)
# Determine the type of mutations for each sequence
mutations_list <- mapply(find_point_mutations, MoreArgs = list(reference = combinedseq),
combinedseq)
# Print the results
print(mutations_list) ``
# Print the results
print(mutations_list)
#If so, what kinds of mutations do you observe in this individual (or individuals)?
MSACom <- msaConvert(msaalignment, type="seqinr::alignment")
d <- dist.alignment(MSACom)
print(d)
#Visualize in Phylogenetic tree
HSTree <- nj(d)
plot(HSTree, main="Phylogenetic Tree of Homo sapains Gene Sequences")
plot(HSTree, main="Phylogenetic Tree of Homo sapains Gene Sequences")
# Choose one DNA sequence to translate to protein
individual6 <- combinedseq[[6]]
# Translate the selected DNA sequence to a protein sequence
protein_sequence <- translate(individual6, genetic_code = "standard")
# Translate the selected DNA sequence to a protein sequence
protein_sequence <- translate(individual6)
# Translate the selected DNA sequence to a protein sequence
amino_acid_sequences <- Biostrings::translate(individual6)
amino_acid_sequences
as.character(amino_acid_sequences)
output_file <- "individual6.fasta"
writeXStringSet(individual6, file = output_file,
format = "fasta", width = 60)
writeXStringSet(individual6, file = output_file,
format = "fasta", width = 60)
writeXStringSet("individual6", file = output_file,
format = "fasta", width = 60)
writeXStringSet(amino_acid_sequences, file = output_file,
format = "fasta", width = 60)
AA_seq <- DNAStringSet(amino_acid_sequences)
AA_seq <- DNAStringSet(individual6)
writeXStringSet(amino_acid_sequences, file = output_file,
format = "fasta", width = 60)
writeXStringSet(individual6, file = output_file,
format = "fasta", width = 60)
writeXStringSet(AA_seq, file = output_file,
format = "fasta", width = 60)
amino_acid_sequences
as.character(amino_acid_sequences)
output_file <- "individual6.fasta"
writeXStringSet(individual6, file = output_file,
format = "fasta", width = 60)
writeXStringSet(amino_acid_sequences, file = output_file,
format = "fasta", width = 60)
AA_seq <- AAStringSet(individual6)
AA_seq <- as.character(amino_acid_sequences)
writeXStringSet(AA_seq, file = output_file,
format = "fasta", width = 60)
writeXStringSet(AAStringSet(AA_seq), file = output_file,
format = "fasta", width = 60)
writeXStringSet(AAStringSet(AA_seq), file = output_file,
format = "fasta", width = 60)
writeXStringSet(AAStringSet(AA_seq), file = output_file,
format = "fasta", width = 60)
accession_number <- ("A0A0J9YWK4")
# Convert the list to a character string
accession_string <- paste(accession_number, collapse = ",")
# Print the formatted string
print(accession_string)
# Reading accession numbers into GetProteinGOInfo ####
AccessionNumbersGO <- GetProteinGOInfo(accession_number)
str(AccessionNumbersGO)
library(devtools)
library(protti)
# Reading accession numbers into GetProteinGOInfo ####
AccessionNumbersGO <- GetProteinGOInfo(accession_number)
# Use GetPathology_Biotech() and Get.diseases() to find information on any diseases or pathologies associated with your gene ####
GP<-GetPathology_Biotech(accession_number)
?GetPathology_Biotech
??GetPathology_Biotech
library("GenomicAlignments")
library("UniprotR")
library("r3dmol")
# Reading accession numbers into GetProteinGOInfo ####
AccessionNumbersGO <- GetProteinGOInfo(accession_number)
str(AccessionNumbersGO)
# Plot your results
PlotGoInfo(AccessionNumbersGO)
# Use GetPathology_Biotech() and Get.diseases() to find information on any diseases or pathologies associated with your gene ####
GP<-GetPathology_Biotech(accession_number)
GP
Get.diseases(GP, directorypath = getwd())
# 7. 3-D structure of protein (added screenshot to output folder)
FAlpha<-fetch_alphafold_prediction(accession_number)
View(FAlpha)
print(msaalignment, show="complete")
View(FAlpha)
View(FAlpha)
rm(list = ls())
# 1. Import and align your DNA sequences
combinedseq <- readDNAStringSet("Data/sequences.fasta")
combinedseq
#### Creating an msa alignment ####
msaalignment <- msa(combinedseq)
msaalignment
print(combinedseq, show="complete")
print(consensus)
print("Mutations:")
print(mutations)
#### Creating an msa alignment ####
msaalignment <- msa(combinedseq)
msaalignment
print(msaalignment, show="complete")
#### Creating a consensus ####
consensus <- consensusString(msaalignment)
print(consensus)
---------------------------------------------------------
# 2. Are any of the samples different from the rest?
# Identify variations or mutations
mutations <- consensus != combinedseq
library(Biostrings)
library(msa)
library(dplyr)
library(tidyverse)
library(genepop)
library(tidyr)
library(seqinr)
library(ape)
library(phangorn)
library(devtools)
library(protti)
library("GenomicAlignments")
library("UniprotR")
library("r3dmol")
print(consensus)
mutations <- consensus != combinedseq
print(msaalignment, show="complete")
print("Mutations:")
print(mutations)
print(mutations)
print(mutations)
--------------------------------------------------------------------
# 3. What is the gene? hbb gene for beta globin
# What is the accession number of the best match to your search? LC121775
# I used individual 6 to find this accession number
# I used BLAST to find the gene and then GenBank for the accession number
--------------------------------------------------------------------
# 4. Who is the most different?
#Visualize in Phylogenetic tree
HSTree <- nj(d)
d <- dist.alignment(MSACom)
#Create a distance matrix
MSACom <- msaConvert(msaalignment, type="seqinr::alignment")
d <- dist.alignment(MSACom)
print(d)
print(mutations)
--------------------------------------------------------------------
# 3. What is the gene? hbb gene for beta globin
# What is the accession number of the best match to your search? LC121775
# I used individual 6 to find this accession number
# I used BLAST to find the gene and then GenBank for the accession number
--------------------------------------------------------------------
# 4. Who is the most different?
#Visualize in Phylogenetic tree
HSTree <- nj(d)
print(mutations)
HSTree <- nj(d)
plot(HSTree, main="Phylogenetic Tree of Homo sapains Gene Sequences")
individual6 <- combinedseq[[6]]
amino_acid_sequences <- Biostrings::translate(individual6)
amino_acid_sequences
AA_seq <- as.character(amino_acid_sequences)
